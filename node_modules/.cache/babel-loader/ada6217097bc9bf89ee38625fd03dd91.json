{"ast":null,"code":"export default function createSlice({\n  initialState,\n  reducers,\n  name\n}) {\n  let action = {};\n  let type = {};\n\n  for (let i in reducers) {\n    let t = `${name}/${i}`;\n\n    action[i] = data => ({\n      type: t,\n      payload: data\n    });\n\n    type[i] = t;\n  }\n\n  function reducer(state = initialState, action) {\n    var _action$type$split;\n\n    let t = (_action$type$split = action.type.split('/')) === null || _action$type$split === void 0 ? void 0 : _action$type$split[1];\n    console.log(action.type);\n    console.log(t);\n    return state;\n  }\n\n  return {\n    action,\n    type,\n    reducer\n  };\n}","map":{"version":3,"sources":["D:/CFD/react JS/react-cfd/src/core/createSlice.jsx"],"names":["createSlice","initialState","reducers","name","action","type","i","t","data","payload","reducer","state","split","console","log"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,QAAhB;AAA0BC,EAAAA;AAA1B,CAArB,EAAuD;AAClE,MAAIC,MAAM,GAAG,EAAb;AAEA,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAT,IAAcJ,QAAd,EAAwB;AACpB,QAAIK,CAAC,GAAI,GAAEJ,IAAK,IAAGG,CAAE,EAArB;;AACAF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAaE,IAAD,KAAW;AACnBH,MAAAA,IAAI,EAAEE,CADa;AAEnBE,MAAAA,OAAO,EAAED;AAFU,KAAX,CAAZ;;AAMAH,IAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUC,CAAV;AACH;;AAED,WAASG,OAAT,CAAiBC,KAAK,GAAGV,YAAzB,EAAuCG,MAAvC,EAA+C;AAAA;;AAC3C,QAAIG,CAAC,yBAAGH,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkB,GAAlB,CAAH,uDAAG,mBAAyB,CAAzB,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACC,IAAnB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ;AAEA,WAAOI,KAAP;AACH;;AAED,SAAO;AACHP,IAAAA,MADG;AAEHC,IAAAA,IAFG;AAGHK,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["export default function createSlice({ initialState, reducers, name }) {\r\n    let action = {}\r\n\r\n    let type = {}\r\n\r\n    for (let i in reducers) {\r\n        let t = `${name}/${i}`\r\n        action[i] = (data) => ({\r\n            type: t,\r\n            payload: data\r\n        })\r\n\r\n\r\n        type[i] = t\r\n    }\r\n\r\n    function reducer(state = initialState, action) {\r\n        let t = action.type.split('/')?.[1]\r\n        console.log(action.type);\r\n        console.log(t);\r\n\r\n        return state\r\n    }\r\n\r\n    return {\r\n        action,\r\n        type,\r\n        reducer\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}