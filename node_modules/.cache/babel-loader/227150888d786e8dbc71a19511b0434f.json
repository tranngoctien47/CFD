{"ast":null,"code":"import { AUTH_LOGIN, AUTH_LOGIN_ERROR, AUTH_LOGOUT, AUTH_POPUP, AUTH_UPDATEINFO } from '../type';\nimport createSlice from \"../../core/createSlice\";\nlet initialState = JSON.parse(localStorage.getItem('auth')) || {\n  login: false,\n  user: null,\n  popupOpen: false,\n  loginError: null,\n  loading: true\n};\nexport default function authReducer(state = initialState, action) {\n  switch (action.type) {\n    case AUTH_POPUP:\n      return { ...state,\n        popupOpen: action.payload\n      };\n\n    case AUTH_LOGIN:\n      // localStorage.setItem('auth', JSON.stringify({\n      //     user: action.payload,\n      //     login: true\n      // }))\n      // if (action.payload.token) {\n      //     localStorage.setItem('token', JSON.stringify(action.payload.token))\n      // }\n      return { ...state,\n        login: true,\n        user: action.payload\n      };\n\n    case AUTH_LOGOUT:\n      return { ...state,\n        login: false,\n        user: null\n      };\n\n    case AUTH_UPDATEINFO:\n      return { ...state,\n        user: action.payload\n      };\n\n    case AUTH_LOGIN_ERROR:\n      return { ...state,\n        loginError: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\nlet {\n  action,\n  reducer,\n  TYPE\n} = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    popupLogin(state, action) {\n      return { ...state,\n        popupOpen: action.payload\n      };\n    },\n\n    login(state, action) {\n      return { ...state,\n        login: true,\n        user: action.payload\n      };\n    },\n\n    logout(state, action) {\n      return { ...state,\n        login: false,\n        user: null\n      };\n    },\n\n    updateInfo(state, action) {\n      return { ...state,\n        user: action.payload\n      };\n    },\n\n    loginError(state, action) {\n      return { ...state,\n        loginError: action.payload\n      };\n    },\n\n    fetchLogin(state, action) {\n      return state;\n    }\n\n  }\n});","map":{"version":3,"sources":["D:/CFD/react JS/react-cfd/src/redux/reducers/authReducer.jsx"],"names":["AUTH_LOGIN","AUTH_LOGIN_ERROR","AUTH_LOGOUT","AUTH_POPUP","AUTH_UPDATEINFO","createSlice","initialState","JSON","parse","localStorage","getItem","login","user","popupOpen","loginError","loading","authReducer","state","action","type","payload","reducer","TYPE","name","reducers","popupLogin","logout","updateInfo","fetchLogin"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,EAAuCC,WAAvC,EAAoDC,UAApD,EAAgEC,eAAhE,QAAuF,SAAvF;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAIA,IAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C;AAC3DC,EAAAA,KAAK,EAAE,KADoD;AAE3DC,EAAAA,IAAI,EAAE,IAFqD;AAG3DC,EAAAA,SAAS,EAAE,KAHgD;AAI3DC,EAAAA,UAAU,EAAE,IAJ+C;AAK3DC,EAAAA,OAAO,EAAE;AALkD,CAA/D;AAQA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGX,YAA7B,EAA2CY,MAA3C,EAAmD;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,UAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHJ,QAAAA,SAAS,EAAEK,MAAM,CAACE;AAFf,OAAP;;AAKJ,SAAKpB,UAAL;AAGI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EACH,GAAGiB,KADA;AAEHN,QAAAA,KAAK,EAAE,IAFJ;AAGHC,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAHV,OAAP;;AAOJ,SAAKlB,WAAL;AAEI,aAAO,EACH,GAAGe,KADA;AAEHN,QAAAA,KAAK,EAAE,KAFJ;AAGHC,QAAAA,IAAI,EAAE;AAHH,OAAP;;AAKJ,SAAKR,eAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAFV,OAAP;;AAKJ,SAAKnB,gBAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHH,QAAAA,UAAU,EAAEI,MAAM,CAACE;AAFhB,OAAP;;AAIJ;AACI,aAAOH,KAAP;AA3CR;AA8CH;AAGD,IAAI;AAAEC,EAAAA,MAAF;AAAUG,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,IAA4BjB,WAAW,CAAC;AACxCkB,EAAAA,IAAI,EAAE,MADkC;AAExCjB,EAAAA,YAFwC;AAGxCkB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACR,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAO,EACH,GAAGD,KADA;AAEHJ,QAAAA,SAAS,EAAEK,MAAM,CAACE;AAFf,OAAP;AAIH,KANK;;AAONT,IAAAA,KAAK,CAACM,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAO,EACH,GAAGD,KADA;AAEHN,QAAAA,KAAK,EAAE,IAFJ;AAGHC,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAHV,OAAP;AAKH,KAbK;;AAcNM,IAAAA,MAAM,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAClB,aAAO,EACH,GAAGD,KADA;AAEHN,QAAAA,KAAK,EAAE,KAFJ;AAGHC,QAAAA,IAAI,EAAE;AAHH,OAAP;AAKH,KApBK;;AAqBNe,IAAAA,UAAU,CAACV,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAO,EACH,GAAGD,KADA;AAEHL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAFV,OAAP;AAIH,KA1BK;;AA2BNN,IAAAA,UAAU,CAACG,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAO,EACH,GAAGD,KADA;AAEHH,QAAAA,UAAU,EAAEI,MAAM,CAACE;AAFhB,OAAP;AAIH,KAhCK;;AAiCNQ,IAAAA,UAAU,CAACX,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAOD,KAAP;AACH;;AAnCK;AAH8B,CAAD,CAA3C","sourcesContent":["import { AUTH_LOGIN, AUTH_LOGIN_ERROR, AUTH_LOGOUT, AUTH_POPUP, AUTH_UPDATEINFO } from '../type'\r\nimport createSlice from \"../../core/createSlice\";\r\n\r\n\r\n\r\nlet initialState = JSON.parse(localStorage.getItem('auth')) || {\r\n    login: false,\r\n    user: null,\r\n    popupOpen: false,\r\n    loginError: null,\r\n    loading: true,\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case AUTH_POPUP:\r\n            return {\r\n                ...state,\r\n                popupOpen: action.payload\r\n            }\r\n\r\n        case AUTH_LOGIN:\r\n\r\n\r\n            // localStorage.setItem('auth', JSON.stringify({\r\n            //     user: action.payload,\r\n            //     login: true\r\n            // }))\r\n            // if (action.payload.token) {\r\n            //     localStorage.setItem('token', JSON.stringify(action.payload.token))\r\n            // }\r\n            return {\r\n                ...state,\r\n                login: true,\r\n                user: action.payload\r\n            }\r\n\r\n\r\n        case AUTH_LOGOUT:\r\n\r\n            return {\r\n                ...state,\r\n                login: false,\r\n                user: null\r\n            }\r\n        case AUTH_UPDATEINFO:\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n\r\n        case AUTH_LOGIN_ERROR:\r\n            return {\r\n                ...state,\r\n                loginError: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nlet { action, reducer, TYPE } = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        popupLogin(state, action) {\r\n            return {\r\n                ...state,\r\n                popupOpen: action.payload\r\n            }\r\n        },\r\n        login(state, action) {\r\n            return {\r\n                ...state,\r\n                login: true,\r\n                user: action.payload\r\n            }\r\n        },\r\n        logout(state, action) {\r\n            return {\r\n                ...state,\r\n                login: false,\r\n                user: null\r\n            }\r\n        },\r\n        updateInfo(state, action) {\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        },\r\n        loginError(state, action) {\r\n            return {\r\n                ...state,\r\n                loginError: action.payload\r\n            }\r\n        },\r\n        fetchLogin(state, action) {\r\n            return state;\r\n        },\r\n    }\r\n\r\n})"]},"metadata":{},"sourceType":"module"}