{"ast":null,"code":"import createSlice from \"../../core/createSlice\"; // import { AUTH_POPUP, AUTH_LOGIN, AUTH_LOGOUT, AUTH_LOGIN_ERROR } from \"../type\";\n\nlet initialState = JSON.parse(localStorage.getItem('auth')) || {\n  login: false,\n  user: null,\n  loginError: null,\n  popupOpen: false\n};\nlet {\n  reducer,\n  type,\n  action\n} = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    popupLogin(state, action) {\n      state.popupOpen = action.payload;\n    },\n\n    login(state, action) {\n      state.login = true;\n      state.user = action.payload;\n    },\n\n    logout(state, action) {\n      return { ...state,\n        login: false,\n        user: null\n      };\n    },\n\n    loginError(state, action) {\n      return { ...state,\n        loginError: action.payload\n      };\n    },\n\n    fetchLogin(state, action) {\n      return state;\n    }\n\n  }\n});\nexport default reducer;\nexport const AUTH = type;\nexport const {\n  popupLogin,\n  login,\n  logout,\n  loginError,\n  fetchLogin\n} = action; // export default function authReducer(state = initialState, action) {\n//     switch (action.type) {\n//         case AUTH_POPUP:\n//             return {\n//                 ...state,\n//                 popupOpen: action.payload\n//             }\n//         case AUTH_LOGIN:\n//             return {\n//                 ...state,\n//                 login: true,\n//                 user: action.payload\n//             }\n//         case AUTH_LOGOUT:\n//             return {\n//                 ...state,\n//                 login: false,\n//                 user: null\n//             }\n//         case AUTH_LOGIN_ERROR:\n//             return {\n//                 ...state,\n//                 loginError: action.payload\n//             }\n//         default:\n//             return state;\n//     }\n// }","map":{"version":3,"sources":["D:/CFD/react JS/react-cfd/src/redux/reducers/authReducer.jsx"],"names":["createSlice","initialState","JSON","parse","localStorage","getItem","login","user","loginError","popupOpen","reducer","type","action","name","reducers","popupLogin","state","payload","logout","fetchLogin","AUTH"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB,C,CACA;;AAEA,IAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C;AAC3DC,EAAAA,KAAK,EAAE,KADoD;AAE3DC,EAAAA,IAAI,EAAE,IAFqD;AAG3DC,EAAAA,UAAU,EAAE,IAH+C;AAI3DC,EAAAA,SAAS,EAAE;AAJgD,CAA/D;AAOA,IAAI;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA;AAAjB,IAA4BZ,WAAW,CAAC;AACxCa,EAAAA,IAAI,EAAE,MADkC;AAExCZ,EAAAA,YAFwC;AAGxCa,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,EAAQJ,MAAR,EAAgB;AACtBI,MAAAA,KAAK,CAACP,SAAN,GAAkBG,MAAM,CAACK,OAAzB;AACH,KAHK;;AAINX,IAAAA,KAAK,CAACU,KAAD,EAAQJ,MAAR,EAAgB;AACjBI,MAAAA,KAAK,CAACV,KAAN,GAAc,IAAd;AACAU,MAAAA,KAAK,CAACT,IAAN,GAAaK,MAAM,CAACK,OAApB;AAEH,KARK;;AASNC,IAAAA,MAAM,CAACF,KAAD,EAAQJ,MAAR,EAAgB;AAClB,aAAO,EACH,GAAGI,KADA;AAEHV,QAAAA,KAAK,EAAE,KAFJ;AAGHC,QAAAA,IAAI,EAAE;AAHH,OAAP;AAKH,KAfK;;AAgBNC,IAAAA,UAAU,CAACQ,KAAD,EAAQJ,MAAR,EAAgB;AACtB,aAAO,EACH,GAAGI,KADA;AAEHR,QAAAA,UAAU,EAAEI,MAAM,CAACK;AAFhB,OAAP;AAIH,KArBK;;AAsBNE,IAAAA,UAAU,CAACH,KAAD,EAAQJ,MAAR,EAAgB;AACtB,aAAOI,KAAP;AACH;;AAxBK;AAH8B,CAAD,CAA3C;AA+BA,eAAeN,OAAf;AAEA,OAAO,MAAMU,IAAI,GAAGT,IAAb;AAEP,OAAO,MAAM;AAAEI,EAAAA,UAAF;AAAcT,EAAAA,KAAd;AAAqBY,EAAAA,MAArB;AAA6BV,EAAAA,UAA7B;AAAyCW,EAAAA;AAAzC,IAAwDP,MAA9D,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import createSlice from \"../../core/createSlice\";\r\n// import { AUTH_POPUP, AUTH_LOGIN, AUTH_LOGOUT, AUTH_LOGIN_ERROR } from \"../type\";\r\n\r\nlet initialState = JSON.parse(localStorage.getItem('auth')) || {\r\n    login: false,\r\n    user: null,\r\n    loginError: null,\r\n    popupOpen: false\r\n}\r\n\r\nlet { reducer, type, action } = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        popupLogin(state, action) {\r\n            state.popupOpen = action.payload;\r\n        },\r\n        login(state, action) {\r\n            state.login = true\r\n            state.user = action.payload\r\n\r\n        },\r\n        logout(state, action) {\r\n            return {\r\n                ...state,\r\n                login: false,\r\n                user: null\r\n            }\r\n        },\r\n        loginError(state, action) {\r\n            return {\r\n                ...state,\r\n                loginError: action.payload\r\n            }\r\n        },\r\n        fetchLogin(state, action) {\r\n            return state;\r\n        }\r\n    }\r\n})\r\n\r\nexport default reducer;\r\n\r\nexport const AUTH = type;\r\n\r\nexport const { popupLogin, login, logout, loginError, fetchLogin } = action;\r\n\r\n// export default function authReducer(state = initialState, action) {\r\n//     switch (action.type) {\r\n//         case AUTH_POPUP:\r\n//             return {\r\n//                 ...state,\r\n//                 popupOpen: action.payload\r\n//             }\r\n//         case AUTH_LOGIN:\r\n\r\n//             return {\r\n//                 ...state,\r\n//                 login: true,\r\n//                 user: action.payload\r\n//             }\r\n//         case AUTH_LOGOUT:\r\n//             return {\r\n//                 ...state,\r\n//                 login: false,\r\n//                 user: null\r\n//             }\r\n//         case AUTH_LOGIN_ERROR:\r\n\r\n//             return {\r\n//                 ...state,\r\n//                 loginError: action.payload\r\n//             }\r\n//         default:\r\n//             return state;\r\n//     }\r\n\r\n// }"]},"metadata":{},"sourceType":"module"}