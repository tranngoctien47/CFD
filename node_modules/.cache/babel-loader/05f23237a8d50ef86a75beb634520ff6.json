{"ast":null,"code":"export default function createSlice({\n  name,\n  initialState,\n  reducers\n}) {\n  let type = {};\n  let action = {};\n\n  for (let i in reducers) {\n    let t = `${name}/${i}`;\n\n    action[i] = data => ({\n      type: t,\n      payload: data\n    });\n\n    type[i] = t;\n  }\n\n  function reducer(state = initialState, action) {\n    var _action$type$split;\n\n    let t = (_action$type$split = action.type.split('/')) === null || _action$type$split === void 0 ? void 0 : _action$type$split[1];\n\n    if (t in reducers) {\n      let newState = reducers[t](state, action);\n\n      if (typeof newState !== 'undefined') {\n        return newState;\n      }\n\n      return { ...state\n      };\n    }\n\n    return state;\n  }\n\n  return {\n    reducer,\n    type,\n    action\n  };\n}","map":{"version":3,"sources":["D:/CFD/react JS/react-cfd/src/core/createSlice.jsx"],"names":["createSlice","name","initialState","reducers","type","action","i","t","data","payload","reducer","state","split","newState"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA;AAAtB,CAArB,EAAuD;AAClE,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAT,IAAcH,QAAd,EAAwB;AACpB,QAAII,CAAC,GAAI,GAAEN,IAAK,IAAGK,CAAE,EAArB;;AACAD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAaE,IAAD,KAAW;AACnBJ,MAAAA,IAAI,EAAEG,CADa;AAEnBE,MAAAA,OAAO,EAAED;AAFU,KAAX,CAAZ;;AAKAJ,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUC,CAAV;AACH;;AAED,WAASG,OAAT,CAAiBC,KAAK,GAAGT,YAAzB,EAAuCG,MAAvC,EAA+C;AAAA;;AAC3C,QAAIE,CAAC,yBAAGF,MAAM,CAACD,IAAP,CAAYQ,KAAZ,CAAkB,GAAlB,CAAH,uDAAG,mBAAyB,CAAzB,CAAR;;AAEA,QAAIL,CAAC,IAAIJ,QAAT,EAAmB;AACf,UAAIU,QAAQ,GAAGV,QAAQ,CAACI,CAAD,CAAR,CAAYI,KAAZ,EAAmBN,MAAnB,CAAf;;AACA,UAAI,OAAOQ,QAAP,KAAoB,WAAxB,EAAqC;AACjC,eAAOA,QAAP;AACH;;AAED,aAAO,EACH,GAAGF;AADA,OAAP;AAIH;;AAED,WAAOA,KAAP;AACH;;AAGD,SAAO;AACHD,IAAAA,OADG;AAEHN,IAAAA,IAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["export default function createSlice({ name, initialState, reducers }) {\r\n    let type = {}\r\n    let action = {}\r\n\r\n    for (let i in reducers) {\r\n        let t = `${name}/${i}`\r\n        action[i] = (data) => ({\r\n            type: t,\r\n            payload: data\r\n        })\r\n\r\n        type[i] = t\r\n    }\r\n\r\n    function reducer(state = initialState, action) {\r\n        let t = action.type.split('/')?.[1]\r\n\r\n        if (t in reducers) {\r\n            let newState = reducers[t](state, action);\r\n            if (typeof newState !== 'undefined') {\r\n                return newState;\r\n            }\r\n\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n\r\n    return {\r\n        reducer,\r\n        type,\r\n        action\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}